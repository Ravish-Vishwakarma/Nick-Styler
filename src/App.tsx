import React, { useState } from 'react';
import { Copy, Sparkles, RefreshCw, Check } from 'lucide-react';

interface StylePreset {
  name: string;
  icon: string;
  variations: ((text: string) => string)[];
}

const stylePresets: StylePreset[] = [
  {
    name: 'Gaming Pro',
    icon: 'üéÆ',
    variations: [
      (text: string) => `‡ºÑ·∂¶·∂∞·µà·≠Ñ‚úø${text}‡øê`,
      (text: string) => `ÍßÅ‡¶î‡ß£‚ò†Ô∏é${text}‚ò†Ô∏é‚ò¨ü•Ä‡¶î‡ß£ÍßÇ`,
      (text: string) => `S·¥ã·≠Ñ${text}·¥Æ·¥ºÀ¢À¢`,
      (text: string) => `ÍßÅ‡ºí‚ò¨${text}¬Æ‚ò¨‡ºíÍßÇ`,
      (text: string) => `‚ñë${text.split('').join('‚ñë')}‚ñë`,
    ]
  },
  {
    name: 'Royal Elite',
    icon: '‚ôï',
    variations: [
      (text: string) => `‚ôï‚ô°‚öò‰∏Ç${text}‚öò‚ô°‚ôï`,
      (text: string) => `ÍßÅ‚ñ™ ${text} ‡øê`,
      (text: string) => `‚ó§‚ó¢‚ó£‚ó•${text}‚ó§‚ó¢‚ó£‚ó•`,
      (text: string) => `„Äê${text}„Äë`,
      (text: string) => `‚ñÑÔ∏ªÃ∑Ãø‚îªÃø‚ïê‚îÅ‰∏Ä${text}`,
    ]
  },
  {
    name: 'Butterfly Style',
    icon: 'ü¶ã',
    variations: [
      (text: string) => `ü¶ã‚ú®${text}‚ú®ü¶ã`,
      (text: string) => `/·ê† - Àï -„Éû‚Å©${text}·≠ÑüéÄ`,
      (text: string) => `‚ô•. * ÔΩ• ÔΩ°Ôæü${text}. * ÔΩ• ÔΩ°Ôæü‚ô•`,
      (text: string) => `‚Äî(‚Ä¢‚Ä¢√∑[ ${text} ]√∑‚Ä¢‚Ä¢)‚Äî`,
      (text: string) => `‚úßÔΩ•Ôæü: *‚úßÔΩ•Ôæü:* ${text} *:ÔΩ•Ôæü‚úß*:ÔΩ•Ôæü‚úß`,
    ]
  },
  {
    name: 'Dark Gothic',
    icon: 'üñ§',
    variations: [
      (text: string) => `ùìëùìªùì∏ùì¥ùìÆùì∑ ${text}‚ô°`,
      (text: string) => `ÍßÅ‡¶î‡ß£‚ò¨‚úû${text}‚úû‚ò¨‡¶î‡ß£ÍßÇ`,
      (text: string) => `ü•Ä${text}ü•Ä`,
      (text: string) => `√óÕú√ó„Ö§${text}„Ö§ùô±ùôæùöà,„ÉÑ`,
      (text: string) => `ÍßÅ‡ºí${text}‡ºíÍßÇ`,
    ]
  },
  {
    name: 'Killer Style',
    icon: 'üíÄ',
    variations: [
      (text: string) => `I·¥∑‚Å±À°À°${text}„ÉÑ`,
      (text: string) => `ü¶ã‚Éü‚Äå‚Éü Õ• Õ£ Õ´ ${text} üñ§‡øê`,
      (text: string) => `SaÃ∂dÃ∂${text}‚àÜY`,
      (text: string) => `‚ò†Ô∏é${text}‚ò†Ô∏é`,
      (text: string) => `√óÕú√ó ${text} √óÕú√ó`,
    ]
  },
  {
    name: 'Fire Demon',
    icon: 'üî•',
    variations: [
      (text: string) => `üî•${text}üî•`,
      (text: string) => `‡¶î‡ß£‚ò¨‚úû${text}‚úû‚ò¨‡¶î‡ß£`,
      (text: string) => `‚ó•‚ó£${text}‚ó¢‚ó§`,
      (text: string) => `‚ñÄ‚ñÑ‚ñÄ‚ñÑ${text}‚ñÑ‚ñÄ‚ñÑ‚ñÄ`,
      (text: string) => `ÍßÅ‡º∫${text}‡ºªÍßÇ`,
    ]
  },
  {
    name: 'VIP Crown',
    icon: 'üëë',
    variations: [
      (text: string) => `V.I.P ${text}`,
      (text: string) => `‚óÜ‚óá‚óÜ${text}‚óÜ‚óá‚óÜ`,
      (text: string) => `‚ñ∞‚ñ±‚ñ∞‚ñ±${text}‚ñ±‚ñ∞‚ñ±‚ñ∞`,
      (text: string) => `ÍßÅ‚úß*ÔΩ°${text}ÔΩ°*‚úßÍßÇ`,
      (text: string) => `‚´∑${text}‚´∏`,
    ]
  },
  {
    name: 'Neon Glow',
    icon: '‚ö°',
    variations: [
      (text: string) => `‚ñë‚ñí‚ñì‚ñà${text}‚ñà‚ñì‚ñí‚ñë`,
      (text: string) => `‚ó¢‚ó§‚ó¢‚ó§${text}‚ó•‚ó£‚ó•‚ó£`,
      (text: string) => `‚ñÅ‚ñÇ‚ñÉ‚ñÑ${text}‚ñÑ‚ñÉ‚ñÇ‚ñÅ`,
      (text: string) => `ÍßÅ‚´∑${text}‚´∏ÍßÇ`,
      (text: string) => `‚ó•‚ó£‚óÜ${text}‚óÜ‚ó¢‚ó§`,
    ]
  },
  {
    name: 'Stylish Fonts',
    icon: '‚ú®',
    variations: [
      (text: string) => text.replace(/[A-Za-z]/g, (char) => {
        const stylishMap: { [key: string]: string } = {
          'a': '·¥Ä', 'b': ' ô', 'c': '·¥Ñ', 'd': '·¥Ö', 'e': '·¥á', 'f': '“ì', 'g': '…¢', 'h': ' ú', 'i': '…™', 'j': '·¥ä',
          'k': '·¥ã', 'l': ' ü', 'm': '·¥ç', 'n': '…¥', 'o': '·¥è', 'p': '·¥ò', 'q': '«´', 'r': ' Ä', 's': 's', 't': '·¥õ',
          'u': '·¥ú', 'v': '·¥†', 'w': '·¥°', 'x': 'x', 'y': ' è', 'z': '·¥¢',
          'A': '·¥Ä', 'B': ' ô', 'C': '·¥Ñ', 'D': '·¥Ö', 'E': '·¥á', 'F': '“ì', 'G': '…¢', 'H': ' ú', 'I': '…™', 'J': '·¥ä',
          'K': '·¥ã', 'L': ' ü', 'M': '·¥ç', 'N': '…¥', 'O': '·¥è', 'P': '·¥ò', 'Q': '«´', 'R': ' Ä', 'S': 's', 'T': '·¥õ',
          'U': '·¥ú', 'V': '·¥†', 'W': '·¥°', 'X': 'x', 'Y': ' è', 'Z': '·¥¢'
        };
        return stylishMap[char] || char;
      }),
      (text: string) => text.replace(/[A-Za-z]/g, (char) => {
        const fancyMap: { [key: string]: string } = {
          'a': 'ùí∂', 'b': 'ùí∑', 'c': 'ùí∏', 'd': 'ùíπ', 'e': 'ùëí', 'f': 'ùíª', 'g': 'ùëî', 'h': 'ùíΩ', 'i': 'ùíæ', 'j': 'ùíø',
          'k': 'ùìÄ', 'l': 'ùìÅ', 'm': 'ùìÇ', 'n': 'ùìÉ', 'o': 'ùëú', 'p': 'ùìÖ', 'q': 'ùìÜ', 'r': 'ùìá', 's': 'ùìà', 't': 'ùìâ',
          'u': 'ùìä', 'v': 'ùìã', 'w': 'ùìå', 'x': 'ùìç', 'y': 'ùìé', 'z': 'ùìè',
          'A': 'ùíú', 'B': 'ùêµ', 'C': 'ùíû', 'D': 'ùíü', 'E': 'ùê∏', 'F': 'ùêπ', 'G': 'ùí¢', 'H': 'ùêª', 'I': 'ùêº', 'J': 'ùí•',
          'K': 'ùí¶', 'L': 'ùêø', 'M': 'ùëÄ', 'N': 'ùí©', 'O': 'ùí™', 'P': 'ùí´', 'Q': 'ùí¨', 'R': 'ùëÖ', 'S': 'ùíÆ', 'T': 'ùíØ',
          'U': 'ùí∞', 'V': 'ùí±', 'W': 'ùí≤', 'X': 'ùí≥', 'Y': 'ùí¥', 'Z': 'ùíµ'
        };
        return fancyMap[char] || char;
      }),
      (text: string) => text.replace(/[A-Za-z]/g, (char) => {
        const boldMap: { [key: string]: string } = {
          'a': 'ùóÆ', 'b': 'ùóØ', 'c': 'ùó∞', 'd': 'ùó±', 'e': 'ùó≤', 'f': 'ùó≥', 'g': 'ùó¥', 'h': 'ùóµ', 'i': 'ùó∂', 'j': 'ùó∑',
          'k': 'ùó∏', 'l': 'ùóπ', 'm': 'ùó∫', 'n': 'ùóª', 'o': 'ùóº', 'p': 'ùóΩ', 'q': 'ùóæ', 'r': 'ùóø', 's': 'ùòÄ', 't': 'ùòÅ',
          'u': 'ùòÇ', 'v': 'ùòÉ', 'w': 'ùòÑ', 'x': 'ùòÖ', 'y': 'ùòÜ', 'z': 'ùòá',
          'A': 'ùóî', 'B': 'ùóï', 'C': 'ùóñ', 'D': 'ùóó', 'E': 'ùóò', 'F': 'ùóô', 'G': 'ùóö', 'H': 'ùóõ', 'I': 'ùóú', 'J': 'ùóù',
          'K': 'ùóû', 'L': 'ùóü', 'M': 'ùó†', 'N': 'ùó°', 'O': 'ùó¢', 'P': 'ùó£', 'Q': 'ùó§', 'R': 'ùó•', 'S': 'ùó¶', 'T': 'ùóß',
          'U': 'ùó®', 'V': 'ùó©', 'W': 'ùó™', 'X': 'ùó´', 'Y': 'ùó¨', 'Z': 'ùó≠'
        };
        return boldMap[char] || char;
      }),
    ]
  },
  {
    name: 'Symbol Warrior',
    icon: '‚öîÔ∏è',
    variations: [
      (text: string) => `‚öîÔ∏è${text}‚öîÔ∏è`,
      (text: string) => `‚óä‚ó¶‚óã‚óä${text}‚óä‚óã‚ó¶‚óä`,
      (text: string) => `‚ñ¨‚ñ¨Œπ‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïêÔ∫§ ${text} Ô∫§‚ïê‚ïê‚ïê‚ïê‚ïê‚ïê‚ïêŒπ‚ñ¨‚ñ¨`,
      (text: string) => `‚ó•‚ó§‚ó¢‚ó£${text}‚ó¢‚ó£‚ó•‚ó§`,
      (text: string) => `‚üê‚üê‚üê${text}‚üê‚üê‚üê`,
    ]
  }
];

function App() {
  const [nickname, setNickname] = useState('');
  const [selectedPreset, setSelectedPreset] = useState<StylePreset | null>(null);
  const [styledResult, setStyledResult] = useState('');
  const [currentVariation, setCurrentVariation] = useState(0);
  const [isCopied, setIsCopied] = useState(false);
  const [isGenerating, setIsGenerating] = useState(false);

  const generateStyledNickname = () => {
    if (!nickname.trim() || !selectedPreset) return;

    setIsGenerating(true);

    setTimeout(() => {
      const variation = selectedPreset.variations[currentVariation];
      const result = variation(nickname.trim());
      setStyledResult(result);
      setCurrentVariation((prev) => (prev + 1) % selectedPreset.variations.length);
      setIsGenerating(false);
    }, 300);
  };

  const copyToClipboard = async () => {
    if (!styledResult) return;

    try {
      await navigator.clipboard.writeText(styledResult);
      setIsCopied(true);
      setTimeout(() => setIsCopied(false), 2000);
    } catch (err) {
      console.error('Failed to copy:', err);
    }
  };

  return (
    <div className="min-h-screen bg-gray-50">
      {/* Header */}
      <header className="bg-white shadow-sm border-b">
        <div className="max-w-4xl mx-auto px-4 py-6">
          <div className="flex items-center gap-3">
            <img src="/logo.png" alt="Logo" className="w-10 h-10 p-1 rounded-lg bg-yellow-100 border border-yellow-300" />
            <div>
              <h1 className="text-2xl font-bold text-gray-900">NickStyler</h1>
              <p className="text-sm text-gray-600">Create stylish nicknames for games and social media</p>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-4xl mx-auto px-4 py-8">
        {/* Input Section */}
        <div className="bg-white rounded-lg shadow-sm border p-6 mb-6">
          <label htmlFor="nickname" className="block text-sm font-medium text-gray-700 mb-2">
            Enter your nickname
          </label>
          <input
            id="nickname"
            type="text"
            value={nickname}
            onChange={(e) => setNickname(e.target.value)}
            placeholder="Type your nickname here..."
            className="w-full px-4 py-3 border border-gray-300 rounded-lg focus:ring-2 focus:ring-blue-500 focus:border-blue-500 outline-none transition-colors"
            maxLength={50}
          />
        </div>

        {/* Style Presets */}
        <div className="bg-white rounded-lg shadow-sm border p-6 mb-6">
          <h2 className="text-lg font-semibold text-gray-900 mb-4">Choose a style</h2>
          <div className="grid grid-cols-2 sm:grid-cols-3 md:grid-cols-5 gap-3">
            {stylePresets.map((preset) => (
              <button
                key={preset.name}
                onClick={() => setSelectedPreset(preset)}
                className={`p-4 rounded-lg border-2 transition-all duration-200 text-center ${selectedPreset?.name === preset.name
                    ? 'border-blue-500 bg-blue-50 text-blue-700'
                    : 'border-gray-200 hover:border-gray-300 hover:bg-gray-50'
                  }`}
              >
                <div className="text-xl mb-1">{preset.icon}</div>
                <div className="text-sm font-medium">{preset.name}</div>
              </button>
            ))}
          </div>
        </div>

        {/* Generate Button */}
        <div className="mb-6">
          <button
            onClick={generateStyledNickname}
            disabled={!nickname.trim() || !selectedPreset || isGenerating}
            className="w-full sm:w-auto px-6 py-3 bg-blue-600 text-white font-medium rounded-lg hover:bg-blue-700 disabled:opacity-50 disabled:cursor-not-allowed transition-colors duration-200 flex items-center justify-center gap-2"
          >
            {isGenerating ? (
              <RefreshCw className="w-4 h-4 animate-spin" />
            ) : (
              <Sparkles className="w-4 h-4" />
            )}
            {isGenerating ? 'Generating...' : 'Generate Style'}
          </button>
        </div>

        {/* Result Section */}
        {styledResult && (
          <div className="bg-white rounded-lg shadow-sm border p-6">
            <div className="flex items-center justify-between mb-4">
              <h3 className="text-lg font-semibold text-gray-900">Your styled nickname</h3>
              <button
                onClick={copyToClipboard}
                className="px-4 py-2 bg-green-600 hover:bg-green-700 text-white text-sm font-medium rounded-lg transition-colors duration-200 flex items-center gap-2"
              >
                {isCopied ? (
                  <>
                    <Check className="w-4 h-4" />
                    Copied!
                  </>
                ) : (
                  <>
                    <Copy className="w-4 h-4" />
                    Copy
                  </>
                )}
              </button>
            </div>

            <div className="bg-gray-50 rounded-lg p-4 border">
              <div className="text-gray-900 text-lg sm:text-xl font-medium break-all text-center">
                {styledResult}
              </div>
            </div>

            <div className="mt-4 text-center">
              <p className="text-gray-600 text-sm">
                Click "Generate Style" again for a different variation
              </p>
            </div>
          </div>
        )}

        {/* Examples Section */}
        <div className="mt-8 bg-white rounded-lg shadow-sm border p-6">
          <h3 className="text-lg font-semibold text-gray-900 mb-4">Example styled nicknames</h3>
          <div className="grid gap-3">
            <div className="bg-gray-50 rounded-lg p-3 text-center">
              <span className="text-gray-800">‚ôï‚ô°‚öò‰∏Çùì™ùô¢·µΩ‡πÑ…ô‚öò‚ô°‚ôï</span>
            </div>
            <div className="bg-gray-50 rounded-lg p-3 text-center">
              <span className="text-gray-800">ü¶ã‚ú®ùïä·¥ß·πÅ·¥ò»¥–µ‚ú®ü¶ã</span>
            </div>
            <div className="bg-gray-50 rounded-lg p-3 text-center">
              <span className="text-gray-800">‚Äî(‚Ä¢‚Ä¢√∑[ ·èö…ëùî™◊ß≈Ä“Ω ]√∑‚Ä¢‚Ä¢)‚Äî</span>
            </div>
            <div className="bg-gray-50 rounded-lg p-3 text-center">
              <span className="text-gray-800">‚ô•. * ÔΩ• ÔΩ°Ôæüùì¢ùîûùó∫ùñïÀ°Œ≠. * ÔΩ• ÔΩ°Ôæü‚ô•</span>
            </div>
            <div className="bg-gray-50 rounded-lg p-3 text-center">
              <span className="text-gray-800">/·ê† - Àï -„Éû‚Å©ùëÜùôñ‚Ç•ùìπùíç—î·≠ÑüéÄ</span>
            </div>
            <div className="bg-gray-50 rounded-lg p-3 text-center">
              <span className="text-gray-800">ÍßÅ‚ñ™ Ôº≤‡∏Ñ·é•‡∏ô—ÇŒ± Ä ‡øê</span>
            </div>
            <div className="bg-gray-50 rounded-lg p-3 text-center">
              <span className="text-gray-800">ùìëùìªùì∏ùì¥ùìÆùì∑ ùìóùìÆùì™ùìªùìΩ‚ô°</span>
            </div>
            <div className="bg-gray-50 rounded-lg p-3 text-center">
              <span className="text-gray-800">ÍßÅ‡¶î‡ß£‚ò¨‚úûùììùñîùñì‚úû‚ò¨‡¶î‡ß£ÍßÇ</span>
            </div>
            <div className="bg-gray-50 rounded-lg p-3 text-center">
              <span className="text-gray-800">ü•Äùï±ùï¨ùï∑ùï∑ùï¥ùïπùï≤ü•Ä</span>
            </div>
            <div className="bg-gray-50 rounded-lg p-3 text-center">
              <span className="text-gray-800">√óÕú√ó„Ö§ùô∞ùôªùôæùôΩùô¥„Ö§ùô±ùôæùöà,„ÉÑ</span>
            </div>
            <div className="bg-gray-50 rounded-lg p-3 text-center">
              <span className="text-gray-800">ÍßÅ‡ºíSaÃ∂dÃ∂B‚àÜY‡ºíÍßÇ</span>
            </div>
            <div className="bg-gray-50 rounded-lg p-3 text-center">
              <span className="text-gray-800">I·¥∑‚Å±À°À°·µß‚Çí·µ§„ÉÑ</span>
            </div>
            <div className="bg-gray-50 rounded-lg p-3 text-center">
              <span className="text-gray-800">ü¶ã‚Éü‚Äå‚Éü Õ• Õ£ Õ´ ùïØùñÜùñóùñîùñì ‡∏ø‡∏Ñrry üñ§‡øê</span>
            </div>
          </div>
        </div>
      </main>

      {/* Footer */}
      <footer className="bg-white border-t mt-12">
        <div className="max-w-4xl mx-auto px-4 py-6 text-center">
          <p className="text-gray-600 text-sm">
            Perfect for gaming profiles, social media, and online communities
          </p>
        </div>
      </footer>
    </div>
  );
}

export default App;